<!DOCTYPE html>
<head>
	<link rel="stylesheet" href="http://www.jstree.com/static/3.3.5/assets/bootstrap/css/bootstrap.min.css" />
	<link rel="stylesheet" href="http://www.jstree.com/static/3.3.5/assets/dist/themes/default/style.min.css" />

	<!--CodeMirror-->
	<link rel="stylesheet" href="codemirror/codemirror.css">
	<link rel="stylesheet" href="codemirror/darcula.css">
	<script src="codemirror/codemirror.js"></script>
	<script src="codemirror/turtle.js"></script>


	<style>
	* {
	    padding: 0px;
	    margin: 0px;
	}
	html {
	    height:100%;
	    min-height: 100%;
	}
table {
    font-family: arial, sans-serif;
    border-collapse: collapse;
    width: 100%;
}

td, th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
}

tr:nth-child(even) {
    background-color: #dddddd;
}
fieldset {
    display: block;
    margin-left: 2px;
    margin-right: 2px;
    padding-top: 0.35em;
    padding-bottom: 0.625em;
    padding-left: 0.75em;
    padding-right: 0.75em;
    border: 2px groove (internal value);
}


/* custom styles for individual items, load this after vis.css/vis-timeline-graph2d.min.css */

.vis-item.blue {
  background-color: #d5ddf6;
  border-color: #97b0f8;
}

.vis-item.green {
  background-color: greenyellow;
  border-color: green;
}

/* create a custom sized dot at the bottom of the red item */
.vis-item.red {
  background-color: red;
  border-color: darkred;
  color: white;
  font-family: monospace;
  box-shadow: 0 0 10px gray;
}
.vis-item.vis-dot.red {
  border-radius: 10px;
  border-width: 10px;
}
.vis-item.vis-line.red {
  border-width: 5px;
}
.vis-item.vis-box.red {
  border-radius: 0;
  border-width: 2px;
  font-size: 24pt;
  font-weight: bold;
}
.vis-item.orange {
  background-color: gold;
  border-color: orange;
}
.vis-item.vis-selected.orange {
  /* custom colors for selected orange items */
  background-color: orange;
  border-color: orangered;
}

.vis-item.magenta {
  background-color: magenta;
  border-color: purple;
  color: white;
}

/* our custom classes overrule the styles for selected events,
   so lets define a new style for the selected events */
.vis-item.vis-selected {
  background-color: white;
  border-color: black;
  color: black;
  box-shadow: 0 0 10px gray;
}


.CodeMirror {
  border: 1px solid #eee;
  height: auto;
}

</style>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-alpha1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-csv/0.71/jquery.csv-0.71.min.js"></script>
	<script src="http://visjs.org/dist/vis.js"></script>
	<link href="http://visjs.org/dist/vis-timeline-graph2d.min.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript">
    $(document).ready(function() {

	// elements


	// The event listener for the file upload
    document.getElementById('txtFileUpload').addEventListener('change', upload, false);

    // Method that checks that the browser supports the HTML5 File API
    function browserSupportFileUpload() {
        var isCompatible = false;
        if (window.File && window.FileReader && window.FileList && window.Blob) {
        isCompatible = true;
        }
        return isCompatible;
    }

    // Method that reads and processes the selected file
    function upload(evt) {
        if (!browserSupportFileUpload()) {
            alert('The File APIs are not fully supported in this browser!');
            } else {
                var data = null;
                var file = evt.target.files[0];
                var reader = new FileReader();
                reader.readAsText(file);
                reader.onload = function(event) {
                    var csvData = event.target.result;
                    data = $.csv.toArrays(csvData);
					//console.log(csvData);
					var selValue = $('input[name=alligator]:checked').val();
					//console.log(selValue);
					$("#loading").html("loading...");
					$.ajax({
						type: "POST",
						url: "http://localhost:8084/alligator/"+selValue+"/",
						data: csvData,
						contentType: 'text/plain',
						error: function (jqXHR, textStatus, errorThrown) {
							alert(errorThrown);
						},
						success: function (response) {
							console.log(response);
							var data = response;
							/*if (data && data.length > 0) {
								alert('Imported -' + data.length + '- rows successfully!');
							} else {
								alert('No data to import!');
							}*/
							if (selValue==="matrixdist") {
								var html = "<tr>";
								for (var item in data[0]) {
									html += "<th>"+data[0][item]+"</th>";
								}
								data.splice(0, 1);
								html += "</tr>";
								for (var row in data) {
									html += "<tr>";
									for (var item in data[row]) {
										html += "<td>"+data[row][item]+"</td>";
									}
									html += "</tr>";
								}
								$("#matrixtable").append(html);
								$("#matrix-div").show();
							}
							if (selValue==="matrixallen") {
								var html = "<tr>";
								for (var item in data[0]) {
									html += "<th>"+data[0][item]+"</th>";
								}
								data.splice(0, 1);
								html += "</tr>";
								for (var row in data) {
									html += "<tr>";
									for (var item in data[row]) {
										html += "<td>"+data[row][item]+"</td>";
									}
									html += "</tr>";
								}
								$("#matrixtable").append(html);
								$("#matrix-div").show();
							}
							if (selValue==="timeline") {
								// hide the "loading..." message
						        //document.getElementById('loading').style.display = 'none';

						        // DOM element where the Timeline will be attached
						        var container = document.getElementById('timeline-div');

								// Create a DataSet (allows two way data-binding)
						        var items = new vis.DataSet(data);

						        // Configuration for the Timeline
						        var options = {};

						        // Create a Timeline
						        var timeline = new vis.Timeline(container, items, options);
								console.log(container, items, options);
						        $('.vis-time-axis.vis-foreground').hide();
							}
							if (selValue==="turtle") {
								$("#rdffile-div").html("");
								$("#rdffile-div").html("<textarea id='rdf'></textarea>");
								var turtle = CodeMirror.fromTextArea(document.getElementById("rdf"), {
									mode: "text/turtle",
          							matchBrackets: true,
									lineNumbers: true,
								});
								turtle.setValue(data);
								turtle.setOption("theme", "darcula");
								$("#rdffile-div").show();
							}
							$("#loading").hide();
						}
					});
                };
                reader.onerror = function() {
                    alert('Unable to read ' + file.fileName);
                };
            }
        }
    });
</script>
    </head>
    <body>
        <div id="dvImportSegments" class="fileupload" style="width:100%">
			<fieldset>
				<legend>Upload your CSV File</legend>
				<input type="radio" name="alligator" value="matrixdist" checked> Matrix 3D-Distances<br>
				<input type="radio" name="alligator" value="matrixallen"> Matrix Allen Intervals<br>
				<input type="radio" name="alligator" value="timeline"> Timeline<br>
				<input type="radio" name="alligator" value="graph"> Graph<br>
				<input type="radio" name="alligator" value="rdfgraph"> RDF Graph<br>
				<input type="radio" name="alligator" value="turtle"> Turtle Representation<br>
			</fieldset>
			<br>
			<fieldset>
				<legend>Upload your CSV File</legend>
				<input type="file" name="File Upload" id="txtFileUpload" accept=".tsv" />
			</fieldset>
			<br>
			<fieldset>
				<legend>Refresh</legend>
				<input type="button" value="Refresh Page" onClick="location.href=location.href">
			</fieldset>
		</div>
		<div id="loading" style="text-align:center;">here comes the content...</div>
		<br>
		<div id="matrix-div"><table id="matrixtable" style="width:100%"></table></div>
		<div id="rdffile-div" style:"height:auto;"><textarea id='rdf' style="width:1px;height:auto"></textarea></div>
		<div id="timeline-div"></div>

    </body>
</html>
